### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Alert {
  message: String!
  type: AlertType!
  vid: String!
}

enum AlertType {
  ERROR
  INFO
  WARNING
}

type BugReport {
  author: User
  data: String
  description: String
  email: String
  title: String!
  vid: String!
}

type CV {
  owner: User!
  records(after: RecordWhereUniqueInput, before: RecordWhereUniqueInput, first: Int, last: Int): [Record!]!
  sectionOrder: String!
  title: String
  vid: String!
}

input CVWhereUniqueInput {
  vid: String
}

scalar DateTime

type Gatekeeper {
  description: String
  name: String!
  vid: String!
}

input GatekeeperWhereUniqueInput {
  name: String
  vid: String
}

type Institution {
  abbreviaton: String
  name: String!
  vid: String!
}

type Location {
  cityTown: String
  country: String
  governingDistrict: String
  vid: String!
}

type Mutation {
  createAlert(message: String!, type: AlertType!): Boolean!
  createBugReport(data: String, description: String, email: String, title: String!): Boolean!
  createUser(vid: String): String!
  deleteAlert(message: String!): Boolean!
  updateUser(legacyJson: String!): Boolean!
}

type Query {
  alertList: [Alert!]!
  currentUser: String!
  isAdmin: Boolean!
}

type Record {
  cvs(after: CVWhereUniqueInput, before: CVWhereUniqueInput, first: Int, last: Int): [CV!]!
  hidden: Boolean!
  owner: User!
  vid: String!
}

type RecordAcademic {
  articleLink: String
  description: String
  endDate: DateTime
  institution: Institution
  location: Location
  record: Record!
  startDate: DateTime!
  title: String!
}

type RecordAchievement {
  certificateLink: String
  description: String
  endDate: DateTime
  institution: Institution
  location: Location
  position: String
  record: Record!
  startDate: DateTime!
  title: String!
}

type RecordEducation {
  course: String!
  description: String
  endDate: DateTime
  institution: Institution
  location: Location
  record: Record!
  startDate: DateTime!
  teacher: String
}

type RecordLanguage {
  level: String!
  name: String!
  record: Record!
}

type RecordPersonal {
  address: String
  birthday: DateTime
  email: String
  github: String
  homepage: String
  linkedin: String
  name: String
  phone: String
  record: Record!
}

type RecordProject {
  description: String
  endDate: DateTime
  location: Location
  programmingLanguage: String
  record: Record!
  repositoryLink: String
  startDate: DateTime!
  title: String!
}

type RecordSkill {
  level: String
  name: String!
  record: Record!
  type: String!
}

input RecordWhereUniqueInput {
  vid: String
}

type RecordWork {
  description: String
  endDate: DateTime
  institution: Institution
  location: Location
  record: Record!
  role: String!
  startDate: DateTime!
}

type Template {
  baseFolder: String!
  command: String!
  name: String!
  params(after: TemplateParamWhereUniqueInput, before: TemplateParamWhereUniqueInput, first: Int, last: Int): [TemplateParam!]!
  vid: String!
}

type TemplateParam {
  defaultValue: String!
  displayName: String!
  name: String!
  template: Template!
  values: String!
  vid: String!
}

input TemplateParamWhereUniqueInput {
  vid: String
}

type User {
  autosave: Boolean!
  cvs(after: CVWhereUniqueInput, before: CVWhereUniqueInput, first: Int, last: Int): [CV!]!
  firebaseId: String!
  gatekeepers(after: GatekeeperWhereUniqueInput, before: GatekeeperWhereUniqueInput, first: Int, last: Int): [Gatekeeper!]!
  records(after: RecordWhereUniqueInput, before: RecordWhereUniqueInput, first: Int, last: Int): [Record!]!
  sectionOrder: String!
  vid: String!
}
